import{g as u,h as t,i as m,t as n}from"./index-eqiCeC4f.js";/**
 * @license lucide-react v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const p=[["path",{d:"M10 2v2",key:"7u0qdc"}],["path",{d:"M14 2v2",key:"6buw04"}],["path",{d:"M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1",key:"pwadti"}],["path",{d:"M6 2v2",key:"colzsn"}]],h=u("coffee",p);class f{async getInitialData(){return t.get("/clocking/initial-data")}async clockIn(){return t.post("/clocking/clock-in")}async clockOut(){return t.post("/clocking/clock-out")}async startBreak(){return t.post("/clocking/break/start")}async endBreak(s){return t.post("/clocking/break/end",s)}async getRecords(s){return t.getPaginated("/clocking/records",s)}async exportRecords(s){return t.post("/clocking/export",s)}async getManagerInitialData(){return t.get("/clocking/manager/initial-data")}async getAllRecords(s){return t.getPaginated("/clocking/manager/all-records",s)}async exportAllRecords(s){return t.post("/clocking/manager/export-all",s)}}const c=new f,S=m((r,s)=>({session:null,companyTimezone:"UTC",serverTimeUtc:"",records:[],recordsPagination:null,managerSessions:[],managerAllRecords:[],managerAllRecordsPagination:null,isLoading:!1,isExporting:!1,error:null,fetchInitialData:async()=>{try{const e=await c.getInitialData();e.success&&r({session:e.data.session,companyTimezone:e.data.company_timezone,serverTimeUtc:e.data.server_time_utc})}catch(e){console.error("Failed to fetch initial data:",e)}},updateSession:e=>{r({session:e.session,companyTimezone:e.company_timezone,serverTimeUtc:e.server_time_utc})},clockIn:async()=>{r({isLoading:!0,error:null});try{const e=await c.clockIn();e.success&&(n.success(e.message),s().updateSession(e.data))}catch(e){const a=e.response?.data?.message||"Failed to clock in";r({error:a}),n.error(a)}finally{r({isLoading:!1})}},clockOut:async()=>{r({isLoading:!0,error:null});try{const e=await c.clockOut();e.success&&(n.success(e.message),s().updateSession(e.data))}catch(e){const a=e.response?.data?.message||"Failed to clock out";r({error:a}),n.error(a)}finally{r({isLoading:!1})}},startBreak:async()=>{r({isLoading:!0,error:null});try{const e=await c.startBreak();e.success&&(n.success(e.message),s().updateSession(e.data))}catch(e){const a=e.response?.data?.message||"Failed to start break";r({error:a}),n.error(a)}finally{r({isLoading:!1})}},endBreak:async e=>{r({isLoading:!0,error:null});try{const a=await c.endBreak(e?{description:e}:void 0);a.success&&(n.success(a.message),s().updateSession(a.data))}catch(a){const o=a.response?.data?.message||"Failed to end break";r({error:o}),n.error(o)}finally{r({isLoading:!1})}},fetchRecords:async e=>{r({isLoading:!0,error:null});try{const a=await c.getRecords(e);a.success&&r({records:a.data,recordsPagination:a.pagination})}catch(a){const o=a.response?.data?.message||"Failed to fetch records";r({error:o}),n.error(o)}finally{r({isLoading:!1})}},exportRecords:async e=>{r({isExporting:!0});try{const a=await c.exportRecords(e);a.success&&(window.open(a.data.download_url,"_blank"),n.success(a.message))}catch(a){n.error(a.response?.data?.message||"Export failed")}finally{r({isExporting:!1})}},fetchManagerInitialData:async()=>{r({isLoading:!0});try{const e=await c.getManagerInitialData();e.success&&r({managerSessions:e.data.sessions,companyTimezone:e.data.company_timezone,serverTimeUtc:e.data.server_time_utc})}catch(e){console.error("Failed to fetch manager data:",e)}finally{r({isLoading:!1})}},updateManagerSession:(e,a)=>{r(o=>{if(!a.session||a.session.status==="completed")return{managerSessions:o.managerSessions.filter(i=>i.session?.user_id!==e),serverTimeUtc:a.server_time_utc};const l=o.managerSessions.findIndex(i=>i.session?.user_id===e);if(l===-1)return{managerSessions:[...o.managerSessions,a],serverTimeUtc:a.server_time_utc};const d=[...o.managerSessions];return d[l]=a,{managerSessions:d,serverTimeUtc:a.server_time_utc}})},fetchManagerAllRecords:async e=>{r({isLoading:!0});try{const a=await c.getAllRecords(e);a.success&&r({managerAllRecords:a.data,managerAllRecordsPagination:a.pagination})}catch(a){console.error("Failed to fetch all records:",a)}finally{r({isLoading:!1})}},exportManagerRecords:async e=>{r({isExporting:!0});try{const a=await c.exportAllRecords(e);a.success&&(window.open(a.data.download_url,"_blank"),n.success(a.message))}catch(a){n.error(a.response?.data?.message||"Export failed")}finally{r({isExporting:!1})}},clearError:()=>r({error:null})})),g=(r,s)=>{const e=new Date(r).getTime(),a=s?new Date(s).getTime():Date.now();return Math.floor((a-e)/1e3)},y=r=>r.reduce((s,e)=>s+g(e.break_start_utc,e.break_end_utc),0),_=(r,s,e)=>{const a=g(r,s),o=y(e);return Math.max(0,a-o)},w=r=>{const s=Math.floor(r/3600),e=Math.floor(r%3600/60),a=r%60;return`${String(s).padStart(2,"0")}:${String(e).padStart(2,"0")}:${String(a).padStart(2,"0")}`},v=(r,s)=>new Date(r).toLocaleString("en-US",{timeZone:s,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1});export{h as C,g as a,_ as b,v as c,y as d,w as f,S as u};
