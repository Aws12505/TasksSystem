import{a as c}from"./analyticsService-DN9lCNCt.js";import{k as l,t}from"./index-AhLzAXVj.js";const g=l((r,i)=>({dashboardSummary:null,comprehensiveReport:null,userPerformance:null,projectAnalytics:null,topPerformers:[],systemStats:null,trendData:[],userRankings:[],realTimeStats:null,performanceAlerts:[],isLoading:!1,error:null,lastUpdated:null,fetchDashboardSummary:async(s,o,a)=>{r({isLoading:!0,error:null});try{const e=await c.getDashboardSummary(s,o,a);e.success?r({dashboardSummary:e.data,isLoading:!1,lastUpdated:new Date().toISOString()}):(r({error:e.message,isLoading:!1}),t.error(e.message))}catch(e){const n=e.message||"Failed to fetch dashboard summary";r({error:n,isLoading:!1}),t.error(n)}},fetchComprehensiveReport:async(s={})=>{r({isLoading:!0,error:null});try{const o=await c.getComprehensiveReport(s);o.success?r({comprehensiveReport:o.data,isLoading:!1,lastUpdated:new Date().toISOString()}):(r({error:o.message,isLoading:!1}),t.error(o.message))}catch(o){const a=o.message||"Failed to fetch comprehensive report";r({error:a,isLoading:!1}),t.error(a)}},fetchUserPerformance:async(s,o,a)=>{r({isLoading:!0,error:null});try{const e=await c.getUserAnalytics(s,o,a);e.success?r({userPerformance:e.data,isLoading:!1,lastUpdated:new Date().toISOString()}):(r({error:e.message,isLoading:!1}),t.error(e.message))}catch(e){const n=e.message||"Failed to fetch user performance";r({error:n,isLoading:!1}),t.error(n)}},fetchProjectAnalytics:async(s,o,a)=>{r({isLoading:!0,error:null});try{const e=await c.getProjectAnalytics(s,o,a);e.success?r({projectAnalytics:e.data,isLoading:!1,lastUpdated:new Date().toISOString()}):(r({error:e.message,isLoading:!1}),t.error(e.message))}catch(e){const n=e.message||"Failed to fetch project analytics";r({error:n,isLoading:!1}),t.error(n)}},fetchTopPerformers:async(s=10,o,a)=>{r({isLoading:!0,error:null});try{const e=await c.getTopPerformers(s,o,a);e.success?r({topPerformers:e.data,isLoading:!1,lastUpdated:new Date().toISOString()}):(r({error:e.message,isLoading:!1}),t.error(e.message))}catch(e){const n=e.message||"Failed to fetch top performers";r({error:n,isLoading:!1}),t.error(n)}},fetchSystemStats:async(s,o)=>{r({isLoading:!0,error:null});try{const a=await c.getSystemStats(s,o);a.success?r({systemStats:a.data,isLoading:!1,lastUpdated:new Date().toISOString()}):(r({error:a.message,isLoading:!1}),t.error(a.message))}catch(a){const e=a.message||"Failed to fetch system stats";r({error:e,isLoading:!1}),t.error(e)}},fetchTrendData:async(s,o,a)=>{try{const e=await c.getTrendData(s,o,a);e.success?r({trendData:e.data}):t.error(e.message)}catch(e){t.error(e.message||"Failed to fetch trend data")}},fetchUserRankings:async(s,o)=>{try{const a=await c.getUserRankings(s,o);a.success?r({userRankings:a.data}):t.error(a.message)}catch(a){t.error(a.message||"Failed to fetch user rankings")}},fetchRealTimeStats:async()=>{try{const s=await c.getRealTimeStats();s.success&&r({realTimeStats:s.data})}catch(s){console.error("Failed to fetch real-time stats:",s)}},fetchPerformanceAlerts:async()=>{try{const s=await c.getPerformanceAlerts();s.success&&r({performanceAlerts:s.data})}catch(s){console.error("Failed to fetch performance alerts:",s)}},markAlertAsRead:async s=>{try{(await c.markAlertAsRead(s)).success&&r(a=>({performanceAlerts:a.performanceAlerts.map(e=>e.id===s?{...e,is_read:!0}:e)}))}catch(o){t.error(o.message||"Failed to mark alert as read")}},compareUsers:async(s,o,a)=>{r({isLoading:!0,error:null});try{const e=await c.compareUsers(s,o,a);return e.success?(r({isLoading:!1}),e.data):(r({error:e.message,isLoading:!1}),t.error(e.message),[])}catch(e){const n=e.message||"Failed to compare users";return r({error:n,isLoading:!1}),t.error(n),[]}},compareProjects:async(s,o,a)=>{r({isLoading:!0,error:null});try{const e=await c.compareProjects(s,o,a);return e.success?(r({isLoading:!1}),e.data):(r({error:e.message,isLoading:!1}),t.error(e.message),[])}catch(e){const n=e.message||"Failed to compare projects";return r({error:n,isLoading:!1}),t.error(n),[]}},clearAnalytics:()=>{r({dashboardSummary:null,comprehensiveReport:null,userPerformance:null,projectAnalytics:null,topPerformers:[],systemStats:null,trendData:[],userRankings:[],realTimeStats:null,performanceAlerts:[],error:null,lastUpdated:null})},setFilters:()=>{r({error:null})},refreshAllData:async()=>{const s=i();await Promise.all([s.fetchDashboardSummary(),s.fetchTopPerformers(),s.fetchSystemStats(),s.fetchRealTimeStats(),s.fetchPerformanceAlerts()])}}));export{g as u};
