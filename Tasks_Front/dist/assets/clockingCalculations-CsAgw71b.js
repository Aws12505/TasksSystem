import{g as p,h as n,i as f,t as r}from"./index-CryAUUlm.js";/**
 * @license lucide-react v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const y=[["path",{d:"M10 2v2",key:"7u0qdc"}],["path",{d:"M14 2v2",key:"6buw04"}],["path",{d:"M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1",key:"pwadti"}],["path",{d:"M6 2v2",key:"colzsn"}]],w=p("coffee",y);class k{async getInitialData(){return n.get("/clocking/initial-data")}async clockIn(){return n.post("/clocking/clock-in")}async clockOut(){return n.post("/clocking/clock-out")}async startBreak(){return n.post("/clocking/break/start")}async endBreak(o){return n.post("/clocking/break/end",o)}async getRecords(o){return n.getPaginated("/clocking/records",o)}async exportRecords(o){return n.post("/clocking/export",o)}async getManagerInitialData(){return n.get("/clocking/manager/initial-data")}async getAllRecords(o){return n.getPaginated("/clocking/manager/all-records",o)}async exportAllRecords(o){return n.post("/clocking/manager/export-all",o)}}const t=new k,_=f((a,o)=>({session:null,companyTimezone:"UTC",serverTimeUtc:"",records:[],recordsPagination:null,managerSessions:[],managerAllRecords:[],managerAllRecordsPagination:null,isLoading:!1,isExporting:!1,error:null,fetchInitialData:async()=>{try{const e=await t.getInitialData();e.success&&a({session:e.data.session,companyTimezone:e.data.company_timezone,serverTimeUtc:e.data.server_time_utc})}catch(e){console.error("Failed to fetch initial data:",e)}},updateSession:e=>{a({session:e.session,companyTimezone:e.company_timezone,serverTimeUtc:e.server_time_utc})},clockIn:async()=>{a({isLoading:!0,error:null});try{const e=await t.clockIn();e.success&&(r.success(e.message),o().updateSession(e.data))}catch(e){const s=e.response?.data?.message||"Failed to clock in";a({error:s}),r.error(s)}finally{a({isLoading:!1})}},clockOut:async()=>{a({isLoading:!0,error:null});try{const e=await t.clockOut();e.success&&(r.success(e.message),o().updateSession(e.data))}catch(e){const s=e.response?.data?.message||"Failed to clock out";a({error:s}),r.error(s)}finally{a({isLoading:!1})}},startBreak:async()=>{a({isLoading:!0,error:null});try{const e=await t.startBreak();e.success&&(r.success(e.message),o().updateSession(e.data))}catch(e){const s=e.response?.data?.message||"Failed to start break";a({error:s}),r.error(s)}finally{a({isLoading:!1})}},endBreak:async e=>{a({isLoading:!0,error:null});try{const s=await t.endBreak(e?{description:e}:void 0);s.success&&(r.success(s.message),o().updateSession(s.data))}catch(s){const c=s.response?.data?.message||"Failed to end break";a({error:c}),r.error(c)}finally{a({isLoading:!1})}},fetchRecords:async e=>{a({isLoading:!0,error:null});try{const s=await t.getRecords(e);s.success&&a({records:s.data,recordsPagination:s.pagination})}catch(s){const c=s.response?.data?.message||"Failed to fetch records";a({error:c}),r.error(c)}finally{a({isLoading:!1})}},exportRecords:async e=>{a({isExporting:!0});try{const s=await t.exportRecords(e);s.success&&(window.open(s.data.download_url,"_blank"),r.success(s.message))}catch(s){r.error(s.response?.data?.message||"Export failed")}finally{a({isExporting:!1})}},fetchManagerInitialData:async()=>{a({isLoading:!0});try{const e=await t.getManagerInitialData();e.success&&a({managerSessions:e.data.sessions,companyTimezone:e.data.company_timezone,serverTimeUtc:e.data.server_time_utc})}catch(e){console.error("Failed to fetch manager data:",e)}finally{a({isLoading:!1})}},updateManagerSession:(e,s)=>{console.group("ðŸ”´ [LEVEL 3] Store updateManagerSession Called"),console.log("userId:",e),console.log("data:",s);const c=o();console.log("Current state managerSessions:",c.managerSessions.length),a(i=>{console.log("Inside set function"),console.log("State at set time:",i.managerSessions.length);const d=i.managerSessions.map(l=>{const g=l.session?.user_id===e;return console.log(`Checking session - userId: ${l.session?.user_id}, matches: ${g}`),g?(console.log("âœ… Match found! Updating session"),console.log("Old session:",{id:l.session?.id,status:l.session?.status,breakCount:l.session?.break_records?.length}),console.log("New data:",{id:s.session?.id,status:s.session?.status,breakCount:s.session?.break_records?.length}),s):l}),u=d.some((l,g)=>l!==i.managerSessions[g]);return console.log("Was any session updated?",u),console.log("Old array reference:",i.managerSessions),console.log("New array reference:",d),console.log("References are different?",i.managerSessions!==d),console.groupEnd(),{managerSessions:d}}),setTimeout(()=>{const i=o();console.group("ðŸŸ  [LEVEL 3] State After Set"),console.log("New state managerSessions count:",i.managerSessions.length);const d=i.managerSessions.find(u=>u.session?.user_id===e);console.log("Target session now:",d),console.groupEnd()},50)},fetchManagerAllRecords:async e=>{a({isLoading:!0});try{const s=await t.getAllRecords(e);s.success&&a({managerAllRecords:s.data,managerAllRecordsPagination:s.pagination})}catch(s){console.error("Failed to fetch all records:",s)}finally{a({isLoading:!1})}},exportManagerRecords:async e=>{a({isExporting:!0});try{const s=await t.exportAllRecords(e);s.success&&(window.open(s.data.download_url,"_blank"),r.success(s.message))}catch(s){r.error(s.response?.data?.message||"Export failed")}finally{a({isExporting:!1})}},clearError:()=>a({error:null})})),m=(a,o)=>{const e=new Date(a).getTime(),s=o?new Date(o).getTime():Date.now();return Math.floor((s-e)/1e3)},h=a=>a.reduce((o,e)=>o+m(e.break_start_utc,e.break_end_utc),0),L=(a,o,e)=>{const s=m(a,o),c=h(e);return Math.max(0,s-c)},x=a=>{const o=Math.floor(a/3600),e=Math.floor(a%3600/60),s=a%60;return`${String(o).padStart(2,"0")}:${String(e).padStart(2,"0")}:${String(s).padStart(2,"0")}`},M=(a,o)=>new Date(a).toLocaleString("en-US",{timeZone:o,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1});export{w as C,m as a,L as b,M as c,h as d,x as f,_ as u};
