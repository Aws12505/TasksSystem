import{J as c,i as u,t as i,H as g}from"./index-BtSm9GAx.js";class l{async getTickets(a=1,r=15){return c.getPaginated("/tickets",{page:a,per_page:r})}async getTicket(a){return c.get(`/tickets/${a}`)}async createTicket(a){return c.post("/tickets",a)}async updateTicket(a,r){return c.put(`/tickets/${a}`,r)}async deleteTicket(a){return c.delete(`/tickets/${a}`)}async getAvailableTickets(a=1,r=15){return c.getPaginated("/tickets/available",{page:a,per_page:r})}async getTicketsByRequester(a,r=1,e=15){return c.getPaginated(`/users/${a}/tickets/requested`,{page:r,per_page:e})}async getTicketsByAssignee(a,r=1,e=15){return c.getPaginated(`/users/${a}/tickets/assigned`,{page:r,per_page:e})}async getTicketsByStatus(a,r=1,e=15){return c.getPaginated(`/tickets/status/${a}`,{page:r,per_page:e})}async getTicketsByType(a,r=1,e=15){return c.getPaginated(`/tickets/type/${a}`,{page:r,per_page:e})}async claimTicket(a){return c.post(`/tickets/${a}/claim`,{})}async assignTicket(a,r){return c.post(`/tickets/${a}/assign/${r}`,{})}async completeTicket(a){return c.post(`/tickets/${a}/complete`,{})}async unassignTicket(a){return c.post(`/tickets/${a}/unassign`,{})}async updateTicketStatus(a,r){return c.post(`/tickets/${a}/status`,r)}static getTicketStatusOptions(){return[{value:"open",label:"Open",color:"red"},{value:"in_progress",label:"In Progress",color:"yellow"},{value:"resolved",label:"Resolved",color:"green"}]}static getTicketTypeOptions(){return[{value:"quick_fix",label:"Quick Fix",estimatedTime:"1-2 hours"},{value:"bug_investigation",label:"Bug Investigation",estimatedTime:"4-8 hours"},{value:"user_support",label:"User Support",estimatedTime:"30 minutes - 2 hours"}]}}const n=new l,d=u((t,a)=>({tickets:[],availableTickets:[],currentTicket:null,availableUsers:[],statusOptions:l.getTicketStatusOptions(),typeOptions:l.getTicketTypeOptions(),pagination:null,isLoading:!1,error:null,fetchTickets:async(r=1)=>{t({isLoading:!0,error:null});try{const e=await n.getTickets(r);e.success?t({tickets:e.data,pagination:e.pagination,isLoading:!1}):(t({error:e.message,isLoading:!1}),i.error(e.message))}catch(e){const s=e.message||"Failed to fetch tickets";t({error:s,isLoading:!1}),i.error(s)}},fetchAvailableTickets:async(r=1)=>{t({isLoading:!0,error:null});try{const e=await n.getAvailableTickets(r);e.success?t({availableTickets:e.data,pagination:e.pagination,isLoading:!1}):(t({error:e.message,isLoading:!1}),i.error(e.message))}catch(e){const s=e.message||"Failed to fetch available tickets";t({error:s,isLoading:!1}),i.error(s)}},fetchTicket:async r=>{t({isLoading:!0,error:null});try{const e=await n.getTicket(r);e.success?t({currentTicket:e.data,isLoading:!1}):(t({error:e.message,isLoading:!1}),i.error(e.message))}catch(e){const s=e.message||"Failed to fetch ticket";t({error:s,isLoading:!1}),i.error(s)}},fetchTicketsByRequester:async(r,e=1)=>{t({isLoading:!0,error:null});try{const s=await n.getTicketsByRequester(r,e);s.success?t({tickets:s.data,pagination:s.pagination,isLoading:!1}):(t({error:s.message,isLoading:!1}),i.error(s.message))}catch(s){const o=s.message||"Failed to fetch tickets by requester";t({error:o,isLoading:!1}),i.error(o)}},fetchTicketsByAssignee:async(r,e=1)=>{t({isLoading:!0,error:null});try{const s=await n.getTicketsByAssignee(r,e);s.success?t({tickets:s.data,pagination:s.pagination,isLoading:!1}):(t({error:s.message,isLoading:!1}),i.error(s.message))}catch(s){const o=s.message||"Failed to fetch tickets by assignee";t({error:o,isLoading:!1}),i.error(o)}},fetchTicketsByStatus:async(r,e=1)=>{t({isLoading:!0,error:null});try{const s=await n.getTicketsByStatus(r,e);s.success?t({tickets:s.data,pagination:s.pagination,isLoading:!1}):(t({error:s.message,isLoading:!1}),i.error(s.message))}catch(s){const o=s.message||"Failed to fetch tickets by status";t({error:o,isLoading:!1}),i.error(o)}},fetchTicketsByType:async(r,e=1)=>{t({isLoading:!0,error:null});try{const s=await n.getTicketsByType(r,e);s.success?t({tickets:s.data,pagination:s.pagination,isLoading:!1}):(t({error:s.message,isLoading:!1}),i.error(s.message))}catch(s){const o=s.message||"Failed to fetch tickets by type";t({error:o,isLoading:!1}),i.error(o)}},fetchAvailableUsers:async()=>{try{const r=await g.getUsers(1,100);r.success&&t({availableUsers:r.data})}catch(r){console.error("Failed to fetch users:",r)}},createTicket:async r=>{t({isLoading:!0,error:null});try{const e=await n.createTicket(r);return e.success?(t({isLoading:!1}),i.success("Ticket created successfully"),a().fetchTickets(),e.data):(t({error:e.message,isLoading:!1}),i.error(e.message),null)}catch(e){const s=e.message||"Failed to create ticket";return t({error:s,isLoading:!1}),i.error(s),null}},updateTicket:async(r,e)=>{t({isLoading:!0,error:null});try{const s=await n.updateTicket(r,e);return s.success?(t({currentTicket:s.data,isLoading:!1}),i.success("Ticket updated successfully"),a().fetchTickets(),s.data):(t({error:s.message,isLoading:!1}),i.error(s.message),null)}catch(s){const o=s.message||"Failed to update ticket";return t({error:o,isLoading:!1}),i.error(o),null}},updateTicketStatus:async(r,e)=>{try{const s=await n.updateTicketStatus(r,e);return s.success?(i.success("Ticket status updated"),a().currentTicket?.id===r&&t({currentTicket:s.data}),a().fetchTickets(),s.data):(i.error(s.message),null)}catch(s){return i.error(s.message||"Failed to update ticket status"),null}},deleteTicket:async r=>{t({isLoading:!0,error:null});try{const e=await n.deleteTicket(r);return e.success?(t({isLoading:!1}),i.success("Ticket deleted successfully"),a().fetchTickets(),!0):(t({error:e.message,isLoading:!1}),i.error(e.message),!1)}catch(e){const s=e.message||"Failed to delete ticket";return t({error:s,isLoading:!1}),i.error(s),!1}},claimTicket:async r=>{try{const e=await n.claimTicket(r);return e.success?(i.success("Ticket claimed successfully"),a().currentTicket?.id===r&&t({currentTicket:e.data}),a().fetchTickets(),a().fetchAvailableTickets(),e.data):(i.error(e.message),null)}catch(e){return i.error(e.message||"Failed to claim ticket"),null}},assignTicket:async(r,e)=>{try{const s=await n.assignTicket(r,e);return s.success?(i.success("Ticket assigned successfully"),a().currentTicket?.id===r&&t({currentTicket:s.data}),a().fetchTickets(),a().fetchAvailableTickets(),s.data):(i.error(s.message),null)}catch(s){return i.error(s.message||"Failed to assign ticket"),null}},completeTicket:async r=>{try{const e=await n.completeTicket(r);return e.success?(i.success("Ticket completed successfully"),a().currentTicket?.id===r&&t({currentTicket:e.data}),a().fetchTickets(),e.data):(i.error(e.message),null)}catch(e){return i.error(e.message||"Failed to complete ticket"),null}},unassignTicket:async r=>{try{const e=await n.unassignTicket(r);return e.success?(i.success("Ticket unassigned successfully"),a().currentTicket?.id===r&&t({currentTicket:e.data}),a().fetchTickets(),a().fetchAvailableTickets(),e.data):(i.error(e.message),null)}catch(e){return i.error(e.message||"Failed to unassign ticket"),null}},getStatusOptions:()=>l.getTicketStatusOptions(),getTypeOptions:()=>l.getTicketTypeOptions(),clearCurrentTicket:()=>t({currentTicket:null,error:null})}));export{d as u};
