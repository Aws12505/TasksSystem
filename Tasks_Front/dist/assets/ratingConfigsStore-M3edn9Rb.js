import{h as g,i as c,t as n}from"./index-BIXuByyq.js";import{r as i}from"./ratingConfigService-CXrBDsqV.js";/**
 * @license lucide-react v0.544.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const f=[["path",{d:"M9.671 4.136a2.34 2.34 0 0 1 4.659 0 2.34 2.34 0 0 0 3.319 1.915 2.34 2.34 0 0 1 2.33 4.033 2.34 2.34 0 0 0 0 3.831 2.34 2.34 0 0 1-2.33 4.033 2.34 2.34 0 0 0-3.319 1.915 2.34 2.34 0 0 1-4.659 0 2.34 2.34 0 0 0-3.32-1.915 2.34 2.34 0 0 1-2.33-4.033 2.34 2.34 0 0 0 0-3.831A2.34 2.34 0 0 1 6.35 6.051a2.34 2.34 0 0 0 3.319-1.915",key:"1i5ecw"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]],d=g("settings",f),C=c((a,o)=>({ratingConfigs:[],currentRatingConfig:null,pagination:null,isLoading:!1,error:null,fetchRatingConfigs:async(s=1)=>{a({isLoading:!0,error:null});try{const e=await i.getRatingConfigs(s);e.success?a({ratingConfigs:e.data,pagination:e.pagination,isLoading:!1}):(a({error:e.message,isLoading:!1}),n.error(e.message))}catch(e){const r=e.message||"Failed to fetch rating configs";a({error:r,isLoading:!1}),n.error(r)}},fetchRatingConfig:async s=>{a({isLoading:!0,error:null});try{const e=await i.getRatingConfig(s);e.success?a({currentRatingConfig:e.data,isLoading:!1}):(a({error:e.message,isLoading:!1}),n.error(e.message))}catch(e){const r=e.message||"Failed to fetch rating config";a({error:r,isLoading:!1}),n.error(r)}},createRatingConfig:async s=>{a({isLoading:!0,error:null});try{const e=await i.createRatingConfig(s);return e.success?(a({isLoading:!1}),n.success("Rating config created successfully"),o().fetchRatingConfigs(),e.data):(a({error:e.message,isLoading:!1}),n.error(e.message),null)}catch(e){const r=e.message||"Failed to create rating config";return a({error:r,isLoading:!1}),n.error(r),null}},updateRatingConfig:async(s,e)=>{a({isLoading:!0,error:null});try{const r=await i.updateRatingConfig(s,e);return r.success?(a({currentRatingConfig:r.data,isLoading:!1}),n.success("Rating config updated successfully"),o().fetchRatingConfigs(),r.data):(a({error:r.message,isLoading:!1}),n.error(r.message),null)}catch(r){const t=r.message||"Failed to update rating config";return a({error:t,isLoading:!1}),n.error(t),null}},deleteRatingConfig:async s=>{a({isLoading:!0,error:null});try{const e=await i.deleteRatingConfig(s);return e.success?(a({isLoading:!1}),n.success("Rating config deleted successfully"),o().fetchRatingConfigs(),!0):(a({error:e.message,isLoading:!1}),n.error(e.message),!1)}catch(e){const r=e.message||"Failed to delete rating config";return a({error:r,isLoading:!1}),n.error(r),!1}},fetchRatingConfigsByType:async(s,e=1)=>{a({isLoading:!0,error:null});try{const r=await i.getRatingConfigsByType(s,e);r.success?a({ratingConfigs:r.data,pagination:r.pagination,isLoading:!1}):(a({error:r.message,isLoading:!1}),n.error(r.message))}catch(r){const t=r.message||"Failed to fetch rating configs by type";a({error:t,isLoading:!1}),n.error(t)}},activateRatingConfig:async s=>{try{const e=await i.activateRatingConfig(s);return e.success?(n.success("Rating config activated successfully"),o().currentRatingConfig?.id===s&&a({currentRatingConfig:e.data}),o().fetchRatingConfigs(),e.data):(n.error(e.message),null)}catch(e){return n.error(e.message||"Failed to activate rating config"),null}},clearCurrentRatingConfig:()=>a({currentRatingConfig:null,error:null})}));export{d as S,C as u};
